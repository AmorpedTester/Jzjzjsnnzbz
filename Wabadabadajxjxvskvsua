-- button Gui
-- Create a ScreenGui
local gui = Instance.new("ScreenGui")
gui.Parent = game.Players.LocalPlayer.PlayerGui
gui.ResetOnSpawn = false

-- Create a TextButton
local button = Instance.new("TextButton")
button.Size = UDim2.new(0, 100, 0, 50)
button.Position = UDim2.new(0, 10, 0.2, -25)  -- Adjusted position to be on the left
button.Text = "Toggle"
button.Parent = gui

-- Function to send the virtual key event
local function sendKeyEvent()
    game:GetService("VirtualInputManager"):SendKeyEvent(true, "LeftControl", false, game)
end

-- Connect the function to the button's MouseClick event
button.MouseButton1Click:Connect(sendKeyEvent)

local player = game.Players.LocalPlayer
local RunService = game:GetService("RunService")

local fpsCounter = Instance.new("ScreenGui")
fpsCounter.Parent = player.PlayerGui
fpsCounter.ResetOnSpawn = false

local label = Instance.new("TextLabel")
label.Size = UDim2.new(0, 150, 0, 70)
label.Position = UDim2.new(0, 200, 0, 10)
label.Text = "FPS: 0\nTime Played: 0h 0m 0s"
label.TextSize = 10
label.Parent = fpsCounter

local startTime = tick()
local lastUpdateTime = tick()
local frameCount = 0

RunService.RenderStepped:Connect(function()
    local currentTime = tick()
    local deltaTime = currentTime - lastUpdateTime
    frameCount = frameCount + 1

    if deltaTime >= 1 then
        local fps = math.floor(frameCount / deltaTime)
        local elapsedTime = currentTime - startTime

        local hours = math.floor(elapsedTime / 3600)
        local minutes = math.floor((elapsedTime % 3600) / 60)
        local seconds = math.floor(elapsedTime % 60)

        label.Text = "FPS: " .. fps .. "\nTime Played: " .. hours .. "h " .. minutes .. "m " .. seconds .. "s"

        lastUpdateTime = currentTime
        frameCount = 0
    end
end)

-- instances
getgenv().Get =
    setmetatable(
    {},
    {
        __index = function(A, B)
            return game:GetService(B)
        end
    }
)

print("Gui: Fluent Library")

wait(0.5)

print("-- Fast Loader V2")
print("-- Unknown TQ Hub 1/5: Checking Game...")

wait(0.2)

print("-- Unknown TQ Hub 2/5: Getting Service...")

wait(0.5)

-- Test literally
local request = http_request or request or HttpPost

-- waiting for game load
while not game:IsLoaded() do
    RunService.Heartbeat:Wait()
end

-- Valuable 1
repeat wait() until game:IsLoaded()
local ReplicatedStorage = Get.ReplicatedStorage
local Players = Get.Players
local RunService = Get.RunService
local TweenService = Get.TweenService
local Workspace = Get.Workspace
local HttpService = Get.HttpService
local Player = Players.LocalPlayer
local InventoryController = require(game:GetService("Players").LocalPlayer.PlayerScripts:WaitForChild("Shared"):WaitForChild("Client"):WaitForChild("InventoryController"))

print("-- Unknown TQ Hub 3/5: Bypassing Random Name...")

wait(0.5)

print("-- Unknown TQ Hub 3.5/5: Bypassing... *DumbExploiterController* ")

-- Valuable Servers
local isWaveDefense
local isGrandGrotto
local isLobby = game.PlaceId == 2960777560

function bypassAntiCheat()
    local exploiterController = game:GetService("Players").LocalPlayer.PlayerScripts.Shared.Client:WaitForChild(
        'DumbExploiterController')

    -- bypass anti-cheat
    local cheat = require(exploiterController)
    cheat._Update = function()
        return
    end

    cheat._SetupDummyRemotes = function()
        return
    end

    while not game:GetService("Players") do
        wait()
    end

    while not game:GetService("ReplicatedStorage") do
        wait()
    end

    task.wait(2)

    game:GetService("Players").Name = 'Players'
    game:GetService("ReplicatedStorage").Name = 'ReplicatedStorage'
    workspace.Name = 'Workspace'

    if isLobby then
        return
    end

    workspace:GetChildren()[5].Name = 'Dungeon'

    -- Wave defense
    if workspace.Dungeon:FindFirstChild("EnemySpawns") then
        workspace.Dungeon:GetChildren()[5].Name = 'Enemies'
        isWaveDefense = workspace.Dungeon:FindFirstChild("EnemySpawns")
        return
    end

    -- Nomal dungeon
    workspace.Dungeon:GetChildren()[1].Name = 'Enemies'
    workspace.Dungeon:GetChildren()[2].Name = 'Rooms'

    -- Grand Grotto
    if workspace.Dungeon.Rooms:FindFirstChild("Start"):FindFirstChild("Traps") then
        isGrandGrotto = true
end

-- Dungeon
    if workspace.Dungeon.Rooms:FindFirstChild("Start") then
        isDungeon = true
   end
end

bypassAntiCheat()

function getPlayer()
    while not game:GetService('Players').LocalPlayer do
        RunService.Heartbeat:Wait()
    end
    while not game:GetService('Players').LocalPlayer.Character do
        RunService.Heartbeat:Wait()
    end
    while not game:GetService('Players').LocalPlayer.Character:FindFirstChild("HumanoidRootPart") do
        RunService.Heartbeat:Wait()
    end
    while not game:GetService('Players').LocalPlayer.Character:FindFirstChild("Humanoid") do
        RunService.Heartbeat:Wait()
    end

    local player = game:GetService('Players').LocalPlayer
    local cha = game:GetService('Players').LocalPlayer.Character
    local plr = game:GetService('Players').LocalPlayer.Character.HumanoidRootPart
    local hum = game:GetService('Players').LocalPlayer.Character.Humanoid
    return player, cha, plr, hum
end

-- Function to get dungeon components
function getDungeon()

    while not game:GetService("Workspace"):FindFirstChild("Dungeon") do
        RunService.Heartbeat:Wait()
    end
    while not game:GetService("Workspace"):FindFirstChild("Dungeon"):FindFirstChild("Rooms") do
        RunService.Heartbeat:Wait()
    end
    while not game:GetService("Workspace"):FindFirstChild("Dungeon"):FindFirstChild("Enemies") do
        RunService.Heartbeat:Wait()
    end
    while not game:GetService("Workspace"):FindFirstChild("Dungeon"):FindFirstChild("Shrines") do
        RunService.Heartbeat:Wait()
    end

    local dungeon = game:GetService("Workspace").Dungeon
    local rooms = dungeon.Rooms
    local enemies = dungeon.Enemies
    local shrines = dungeon.Shrines
    return dungeon, rooms, enemies, shrines
end

function killAuraV1(monster)
local dungeon, rooms, enemies, shrines = getDungeon()

   for _, monster in ipairs(enemies:GetChildren()) do
    if monster:FindFirstChild("EvilHumanoid") and monster:FindFirstChild("HumanoidRootPart") and
       monster.EvilHumanoid.Health > 0 then
        local monsterRootPart = monster.HumanoidRootPart
        
        for _, damage in ipairs(game:GetService("Workspace").Ignore:GetDescendants()) do
        -- if damage.ClassName ~= "Model" then
        --     pcall(function()
        --         damage.Transparency = 1
        --         damage.CFrame = CFrame.new(monster.HumanoidRootPart.Position)
        --         -- damage.Position = monster.HumanoidRootPart.Position
        --     end)
        -- end
        pcall(function()
                    if damage.ClassName ~= "Model" or damage.ClassName ~= "Explosion" then
                       damage.CFrame = CFrame.new(monster.HumanoidRootPart.Position)
                       damage.Position = monster.HumanoidRootPart.Position
                    end
                    if damage:FindFirstChild("Hitbox") then
                       damage.CFrame = CFrame.new(monster.HumanoidRootPart.Position)
                       damage.Position = monster.HumanoidRootPart.Position
                    end
                end)
            end
            
            wait(0.1)
        end
    end
end

function killAuraV2(monster)
    local dungeon, rooms, enemies, shrines = getDungeon()

    for _, monster in ipairs(enemies:GetChildren()) do
        if monster:FindFirstChild("EvilHumanoid") and monster:FindFirstChild("HumanoidRootPart") and
           monster.EvilHumanoid.Health > 0 then
            local monsterRootPart = monster.HumanoidRootPart

            for _, damage in ipairs(game:GetService("Workspace").Ignore:GetDescendants()) do
                if damage.ClassName ~= "BasePart" or damage.ClassName ~= "MeshPart" or damage.ClassName ~= "Model" then
                    pcall(function()
                        damage.Transparency = 1
                        damage.CFrame = CFrame.new(monsterRootPart.Position)
                        damage.Position = monsterRootPart.Position
                    end)
                end
            end

            wait(0.1)  -- Add a delay to reduce execution frequency
        end
    end
end


function killAuraV3(monster)
    for _, monster in pairs(workspace:GetDescendants()) do
    if monster:FindFirstChild("HumanoidRootPart") then
        if monster.Name ~= game.Players.LocalPlayer.Name then
            local monsterRootPart = monster.HumanoidRootPart
                
            for _, damage in ipairs(game:GetService("Workspace").Ignore:GetDescendants()) do
                if damage.ClassName ~= "Model" or damage.ClassName ~= "MeshPart" or damage.ClassName ~= "BasePart" then
                    pcall(function()
                        damage.Transparency = 1
                        damage.CFrame = CFrame.new(monsterRootPart.Position)
                        damage.Position = monsterRootPart.Position
                    end)
                end
            end

            wait(0.1)  -- Add a delay to reduce execution frequency
        end
    end
  end
end

function killAuraV4(monster)
   for _, monster in pairs(workspace:GetDescendants()) do
    if monster:FindFirstChild("HumanoidRootPart") then
        if monster.Name ~= game.Players.LocalPlayer.Name then
            local monsterRootPart = monster.HumanoidRootPart
        
        for _, damage in ipairs(game:GetService("Workspace").Ignore:GetDescendants()) do
        -- if damage.ClassName ~= "Model" then
        --     pcall(function()
        --         damage.Transparency = 1
        --         damage.CFrame = CFrame.new(monster.HumanoidRootPart.Position)
        --         -- damage.Position = Vector3.new(monster.HumanoidRootPart.Position)
        --     end)
        -- end
        pcall(function()
                    if damage.ClassName ~= "Model" or damage.ClassName ~= "Explosion" then
                       damage.CFrame = CFrame.new(monster.HumanoidRootPart.Position)
                       damage.Position = monster.HumanoidRootPart.Position
                    end
                    if damage:FindFirstChild("Hitbox") then
                       damage.CFrame = CFrame.new(monster.HumanoidRootPart.Position)
                       damage.Position = monster.HumanoidRootPart.Position
                    end
                end)
            end
            
            wait(0.1)
        end
    end
  end
end

function getNearestAttack()
    local nearestAttack = nil
    local closestDistance = math.huge
    local player, cha, plr, hum = getPlayer()
    for _, v in pairs(workspace:GetChildren()) do
        if v:IsA("Part") then
            local distance = (v.Position - plr.Position).Magnitude
            if distance < closestDistance then
                closestDistance = distance
                nearestAttack = v
            end
        end
    end
    
wait(0.1)
    return nearestAttack, closestDistance
end

local function AllKill()
    getNearestAttack()
    killAuraV1(monster)
    killAuraV2(monster)
    wait(0.1)
end

local function AllKill2()
    getNearestAttack()
    killAuraV3(monster)
    killAuraV4(monster)
    wait(0.1)
end

local h = require(ReplicatedStorage.Shared.Modules.DungeonLibrary)

local Settings = {}

local Dungeons = {}
for i, v in pairs(h.Dungeons) do
    table.insert(Dungeons, i)
end
GameModes = {}
for i, v in pairs(h.GameModes) do
    table.insert(GameModes, i)
end
Difficulties = {}
for i, v in pairs(h.Difficulties) do
    table.insert(Difficulties, i)
end

local function GetClosestt()
    local TargetDistance = math.huge
    local Target
    for i, v in pairs(Workspace:GetChildren()) do
        if v.ClassName == "Folder" then
            for i, x in pairs(v:GetChildren()) do
                if x.ClassName == "Folder" then
                    for i, c in pairs(x:GetChildren()) do
                        if
                            c.ClassName == "Model" and c:FindFirstChild("EvilHumanoid") and
                                c:FindFirstChildOfClass("Humanoid").Health ~= 0 and
                                c ~= nil
                         then
                            local mag =
                                (Player.Character.HumanoidRootPart.Position -
                                c.HumanoidRootPart.Position).magnitude
                            if mag < TargetDistance then
                                TargetDistance = mag
                                Target = c
                            end
                        end
                    end
                end
            end
        end
    end
    return Target
end
    
local Noclip = function(A)
    return A:ChangeState(11)
end 

--[[ local Tween = function(A,B,C)
     if A and B and C then
        return TweenService:Create(A, TweenInfo.new((B.Position + Vector3.new(x,y,z) - A.Position).magnitude / C, Enum.EasingStyle.Linear, Enum.EasingDirection.Out),{CFrame = CFrame.new(B.Position + Vector3.new(x,y,z))}):Play()
    end 
end
]]
local TweenService = game:GetService("TweenService")

local function Tween(A, B, C)
    if A and B and C then
        local distance = (B.Position + Vector3.new(x,y,z) - A.Position).Magnitude

        local speed = 68 -- Default speed for larger distances
        if distance < 150 then
            speed = 50
        elseif distance < 200 then
            speed = 52
        elseif distance < 300 then
            speed = 56
        elseif distance < 500 then
            speed = 64
        elseif distance < 1000 then
            speed = 68
        end

        local time = distance / speed

        return TweenService:Create(A, TweenInfo.new(time, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {CFrame = CFrame.new(B.Position + Vector3.new(x,y,z))}):Play()
    end
end


local Script = require(Player.PlayerScripts.Shared.Client.CombatController)
local ScriptFunction = Script.BasicAttack
local ScriptFunction2 = Script.UseAbility

x = 0

y = 0

z = -2

-- Valuable from autoleave
local cha = game:GetService('Players').LocalPlayer.Character
local mainFrame = game:GetService("Players")[cha.Name].PlayerGui:WaitForChild("MainGui"):WaitForChild("MainFrame")
local rightSideFrame = mainFrame:WaitForChild("Right")
local topSideFrame = mainFrame:WaitForChild("Top")
local playerCard = mainFrame:WaitForChild("Bottom"):WaitForChild("PlayerCard")

if game.PlaceId == 2960777560 then
pcall(function()
ReplicatedStorage.Lobby.Remotes.ClaimDailyReward:FireServer()
ReplicatedStorage.Lobby.Remotes.ClaimTreasureReward:FireServer()
end)
end

game:GetService("Workspace"):FindFirstChild("Map")

print("-- Unknown TQ Hub 4/5: Checking Exploit Support...")

wait(0.1)

if not require then
    return game.Players.LocalPlayer:Kick("Your Exploit doesn't support")
end

if not firetouchinterest then
    return game.Players.LocalPlayer:Kick("Your Exploit doesn't support")
end

print("-- Unknown TQ Hub 5/5: Loaded, Pls Wait for Few Seconds...")

wait(0.1)

-- Troubleshooting Ui library
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/Unknownproootest/Unknown-TreasureQuest/Alt/Test_FixMinimizeKey"))()

local Options = Fluent.Options

Fluent:Notify({
        Title = "Made by Unknownproooolucky",
        Content = "",
        SubContent = "", -- Optional
        Duration = 5 -- Set to nil to make the notification not disappear
    })
   
Fluent:Notify({
        Title = "Announcement Notification",
        Content = "Update Notifier",
        SubContent = "No Update Waiting for New Event", -- Optional
        Duration = 10 -- Set to nil to make the notification not disappear
    })
   
Fluent:Notify({
        Title = "Quick Optimzer",
        Content = "Done!",
        SubContent = "", -- Optional
        Duration = 10 -- Set to nil to make the notification not disappear
    })
   
local Window = Fluent:CreateWindow({
    Title = "Unknown TQ Hub",
    SubTitle = "V3.6b4 (Dungeon) ",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

local Tabs = {
    Main = Window:AddTab({ Title = "Auto Farms", Icon = "rbxassetid://7733960981" }),
}

if isLobby or isDungeon or isGrandGrotto then

Tabs.Main:AddParagraph({
        Title = "Auto Farm",
        Content = "Enable Kill Aura To Farm Faster!"
    })

Tabs.Main:AddParagraph({
        Title = "Warrior: Set The Hitbox Ever you want!",
        Content = "Kill Aura: Allowed "
    })

Tabs.Main:AddParagraph({
        Title = "Wizard: Best Farm Ability is Tsunami",
        Content = "Kill Aura: Allowed (Fast But Only High Device)"
    })
    
end

if isWaveDefense then

Tabs.Main:AddParagraph({
        Title = "Wave Defense Farms (BETA)",
        Content = "Enable Kill Aura To Farm Faster!"
    })

Tabs.Main:AddParagraph({
        Title = "Warrior: Set the Hitbox Ever you want!",
        Content = "Kill Aura: Allowed"
    })

Tabs.Main:AddParagraph({
        Title = "Wizard: Not Working",
        Content = "Kill Aura: Allowed"
    })

end

local Toggle1 = Tabs.Main:AddToggle("AutokillMobsWarrior", {Title = "Auto Kill Mobs (Warrior)", Default = false })

Toggle1:OnChanged(function(State)
    Settings.H = State
    game:GetService("RunService").Stepped:Connect(function()
        pcall(function()
            if Settings.H then
                ScriptFunction(Script)
                ScriptFunction2(Script, GetClosestt().PrimaryPart.Position)
                Noclip(Player.Character:WaitForChild("Humanoid"))
            end
        end)
    end)
    spawn(function()
        while wait() and Settings.H do 
            pcall(function()
                ReplicatedStorage.Dungeon.Remotes.StartDungeon:FireServer()
                ReplicatedStorage.Dungeon.Remotes.StartDungeon:FireServer()
                ReplicatedStorage.Dungeon.Remotes.StartWaveDefense:FireServer()
                ReplicatedStorage.Shared.Remotes.Data.ClaimPrizes:FireServer()
                for i, v in pairs(Workspace:GetChildren()) do
                    if v:FindFirstChild("FinishRoom", true) and v:FindFirstChild("FinishRoom", true):FindFirstChild("Hitbox", true) then
                        firetouchinterest(Player.Character:FindFirstChild("HumanoidRootPart", true),v:FindFirstChild("FinishRoom",true):FindFirstChild("Hitbox",true):FindFirstChild("Part",true),0)
                        firetouchinterest(Player.Character:FindFirstChild("HumanoidRootPart", true),v:FindFirstChild("FinishRoom",true):FindFirstChild("Hitbox",true):FindFirstChild("Part",true),1)
                    end 
                end 
                if GetClosestt():FindFirstChildWhichIsA("Humanoid",true).Health ~= 0 then
                    Tween(Player.Character:FindFirstChild("HumanoidRootPart",true),GetClosestt().HumanoidRootPart,time)
                end 
            end)
        end
    end)
 end)
 
Options.AutokillMobsWarrior:SetValue(false)

local function StartDungeon()
    local hasHumanoidRootPart = false
    for _, v in ipairs(game:GetService("Workspace"):GetChildren()) do
        if v.ClassName == "Folder" then
            for _, x in ipairs(v:GetChildren()) do
                if x.ClassName == "Folder" then
                    for _, c in ipairs(x:GetChildren()) do
                        if c:IsA("Model") and c:FindFirstChild("HumanoidRootPart") then
                            hasHumanoidRootPart = true
                            break
                        end
                    end
                end
                if hasHumanoidRootPart then
                    break
                end
            end
        end
        if hasHumanoidRootPart then
            break
        end
    end

    if not hasHumanoidRootPart then
        wait(1.5)
        game.ReplicatedStorage.Dungeon.Remotes.StartDungeon:FireServer()
        game.ReplicatedStorage.Dungeon.Remotes.StartWaveDefense:FireServer()
    end
end

-------------------------------------------------------------------------------------------------------------------------------------------------

local visitedChests = {}
local lastVisitedChest = nil

local function findNewChestInWorkspace(parent)
    for _, child in pairs(parent:GetChildren()) do
        if child:IsA("Folder") and child.Name == "Chests" then
            for _, grandchild in pairs(child:GetChildren()) do
                if grandchild:IsA("Model") and grandchild.Name == "Chest" then
                    local ChestPart = grandchild:FindFirstChild("Hitbox")
                    if ChestPart and not visitedChests[grandchild] then
                        visitedChests[grandchild] = true
                        lastVisitedChest = grandchild
                        return ChestPart
                    end
                end
            end
        end

        local foundPart = findNewChestInWorkspace(child)
        if foundPart then
            return foundPart
        end
    end

    return nil
end

-----------------------------------------------------------------------------------------------------------------------------------------------------

local function findFinishPartInWorkspace(workspace)
    local function searchInChildren(parent)
        for _, child in pairs(parent:GetChildren()) do
            if child:IsA("Model") and child.Name == "FinishRoom" then
                local finishPart = child:FindFirstChild("Hitbox")
                local HitboxPart = finishPart and finishPart:FindFirstChildWhichIsA("BasePart")
                if HitboxPart then
                    return HitboxPart
                end
            end

            local foundPart = searchInChildren(child)
            if foundPart then
                return foundPart
            end
        end

        return nil
    end

    return searchInChildren(workspace)
end

--------------------------------------------------------------------------------------------------------------------------------------------

local function findBossRoomInWorkspace(workspace)
    local function searchInChildren(parent)
        for _, child in pairs(parent:GetChildren()) do
            if child:IsA("Model") and child.Name == "BossRoom" then
                local BossPart = child:FindFirstChild("PlayerSpawn")
                if BossPart then
                    return BossPart
                end
            end

            local foundPart = searchInChildren(child)
            if foundPart then
                return foundPart
            end
        end

        return nil
    end

    return searchInChildren(workspace)
end

local BossPartInstance = nil

local function CreateBossPart()
    local partSize = Vector3.new(20000, 10, 20000)

    if BossPartInstance and BossPartInstance:IsDescendantOf(workspace) then
        BossPartInstance:Destroy()
    end

    local createdPart = Instance.new("Part")
    createdPart.Name = "PartฺBossGGez"
    createdPart.Size = partSize

    local PlayerSpawn = findBossRoomInWorkspace(workspace)
    if PlayerSpawn then
        createdPart.Position = PlayerSpawn.Position - Vector3.new(0, 10, 0)
    else
        createdPart.Position = Vector3.new(0, -10, 0)
    end
    createdPart.Anchored = true
    createdPart.Parent = workspace

    BossPartInstance = createdPart

    local HitboxPart = findFinishPartInWorkspace(workspace)
    if HitboxPart then
        for _, part in pairs(workspace:GetChildren()) do
            if part:IsA("Part") and part.Name == "PartฺBossGGez" then
                part:Destroy()
            end
        end
    end
    return createdPart
end

local function MoveOutFromBossRoom()
    CreateBossPart()
    wait(3)
    local PlayerSpawn = findBossRoomInWorkspace(workspace)
    if PlayerSpawn then
        local targetPosition = PlayerSpawn.Position - Vector3.new(0, 0, -75)
        local movementSpeed = 68

        local TweenService = game:GetService("TweenService")
        local HumanoidRootPart = game.Players.LocalPlayer.Character.HumanoidRootPart

        local distance = (targetPosition - HumanoidRootPart.Position).Magnitude
        if distance < 150 then
            movementSpeed = 50
        elseif distance < 200 then
            movementSpeed = 54
        elseif distance < 300 then
            movementSpeed = 59
        elseif distance < 500 then
            movementSpeed = 62
        elseif distance < 1000 then
            movementSpeed = 65
        end
        
        local duration = distance / movementSpeed

        local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear)
        local tween = TweenService:Create(HumanoidRootPart, tweenInfo, {
            CFrame = CFrame.new(targetPosition)
        })

        tween:Play()
    end
end

---------------------------------------------------------------------------------------------------------------------------------

local Script = require(Player.PlayerScripts.Shared.Client.CombatController)
local ScriptFunction = Script.BasicAttack
local ScriptFunction2 = Script.UseAbility

local Workspace = game:GetService("Workspace")
local AutoMobs = false

local Toggle4 = Tabs.Main:AddToggle("AutoKillMobsWizard", { Title = "Auto Kill Mobs (Wizard)", Default = false })

Toggle4:OnChanged(function(vaf)
    AutoMobs = vaf
    if AutoMobs then
        spawn(function()
            while AutoMobs do
                StartDungeon()

                wait(1)
        
                            for _, v in ipairs(Workspace:GetChildren()) do
                                if v.ClassName == "Folder" then
                                    for _, x in ipairs(v:GetChildren()) do
                                        if x.ClassName == "Folder" then
                                            for _, c in ipairs(x:GetChildren()) do
                                                if c:IsA("Model") and c:FindFirstChild("EvilHumanoid") then
                                                    local EvilHumanoid = c:FindFirstChild("EvilHumanoid")
                                                    local humanoidRootPart = c:FindFirstChild("HumanoidRootPart")

                                                    if EvilHumanoid and humanoidRootPart then
                                                        local monsterPos = humanoidRootPart.Position
                                                        local player = game.Players.LocalPlayer
                                                        local playerPos = player.Character and player.Character:FindFirstChild("HumanoidRootPart") and player.Character.HumanoidRootPart.Position

                                                        if playerPos and EvilHumanoid.Health > 0 then
                                                            local direction = (playerPos - monsterPos).unit
                                                            local distanceToTeleport = 3
                                                            local teleportPos = playerPos + direction * distanceToTeleport
                                                            humanoidRootPart.Position = teleportPos
                                                        end
                                                    end
                                                end
                                             wait(0.1)
                                            end
                                        end
                                    end
                                end
                            end
                 wait(0.1)
            end
        end)

        local function PerformAttack()
            pcall(function()
                if AutoMobs then
                    ScriptFunction(Script)
                    ScriptFunction2(Script)
                end
            end)
        end
        game:GetService("RunService").Stepped:Connect(PerformAttack)

        spawn(function()
            while AutoMobs do
                MoveOutFromBossRoom()
                wait(0.01)
            end
        end)

        spawn(function()
            while AutoMobs do
                local finishPart = findFinishPartInWorkspace(game:GetService("Workspace"))
                if finishPart then
                    local character = game.Players.LocalPlayer.Character
                    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
                    if humanoidRootPart then
                        humanoidRootPart.CFrame = finishPart.CFrame
                    end
                end
                wait(0.1)
            end
        end)
    end
end)

Options.AutoKillMobsWizard:SetValue(false)

Tabs.Main:AddParagraph({
        Title = "Auto Collects",
        Content = ""
    })

local Toggle2 = Tabs.Main:AddToggle("AutoChest", {Title = "Auto Collect Chest", Default = false })

Toggle2:OnChanged(function(State)
    Settings.Treasure = State
    spawn(function()
        while wait() and Settings.Treasure do 
            pcall(function()
                for i, v in pairs(Workspace:GetDescendants()) do
                    if v.Name == "Chest"  then
                        firetouchinterest(Player.Character:FindFirstChild("HumanoidRootPart",true),v:FindFirstChild("Hitbox"),0)
                        firetouchinterest(Player.Character:FindFirstChild("HumanoidRootPart",true),v:FindFirstChild("Hitbox"),1)
                    end 
                end 
            end)
        end 
    end)
end)

Options.AutoChest:SetValue(false)

local Toggle3 = Tabs.Main:AddToggle("AutoMedkits", {Title = "Auto Collect Medkits", Default = false })

Toggle3:OnChanged(function(State)
    Settings.Med = State
    spawn(function()
    while wait() and Settings.Med do
        pcall(function()
            for i,v in pairs(Workspace.Ignore:GetChildren()) do
                if v.Name == "Medkit" and v:FindFirstChildWhichIsA("TouchTransmitter",true) then
                    if Player.Character.Humanoid.Health < Player.Character.Humanoid.MaxHealth then
                        firetouchinterest(Player.Character:FindFirstChild("HumanoidRootPart",true), v, 0)
                        firetouchinterest(Player.Character:FindFirstChild("HumanoidRootPart",true), v, 1)
                      end 
                  end 
              end
           end)
       end 
    end)
end)

Options.AutoMedkits:SetValue(false)

Tabs.Main:AddParagraph({
        Title = "Tween Settings",
        Content = "Edit it, if u want"
    })

Tabs.Main:AddParagraph({
        Title = "Tween Speed: Distance Calculation Mode",
        Content = ""
    })

--[[ local twSpeed = Tabs.Main:AddInput("TweenS", {
        Title = "Tween Speed",
        Default = "50",
        Placeholder = "Put a Speed",
        Numeric = true, -- Only allows numbers
        Finished = false, -- Only calls callback when you press enter
        Callback = function(speedtw)
                 speed = tonumber(speedtw) or 50
      end
    })
]]

    local TweenX = Tabs.Main:AddInput("TweenX", {
        Title = "Tween Position X",
        Default = "0",
        Placeholder = "Placeholder",
        Numeric = false, -- Only allows numbers
        Finished = false, -- Only calls callback when you press enter
        Callback = function(xtw)
x = xtw
        end
    })


    local TweenY = Tabs.Main:AddInput("TweenY", {
        Title = "Tween Position Y",
        Default = "0",
        Placeholder = "Placeholder",
        Numeric = false, -- Only allows numbers
        Finished = false, -- Only calls callback when you press enter
        Callback = function(ytw)
y = ytw
        end
    })

    local TweenZ = Tabs.Main:AddInput("TweenZ", {
        Title = "Tween Position Z",
        Default = "-2",
        Placeholder = "Placeholder",
        Numeric = false, -- Only allows numbers
        Finished = false, -- Only calls callback when you press enter
        Callback = function(ztw)
z = ztw
        end
    })
   
Tabs.Main:AddParagraph({
        Title = "Grand Grotto",
        Content = ""
    })

local Toggle1 = Tabs.Main:AddToggle("AutoGrotto", {Title = "Auto Kill Grand Grotto Mobs", Default = false })

Toggle1:OnChanged(function(State)
    Settings.Re = State
    game:GetService("RunService").Stepped:Connect(function()
        pcall(function()
            if Settings.Re then
                ScriptFunction(Script)
                ScriptFunction2(Script, GetClosestt().PrimaryPart.Position)
                Noclip(Player.Character:WaitForChild("Humanoid"))
            end
        end)
    end)
    spawn(function()
        while wait() and Settings.Re do 
            pcall(function()
                ReplicatedStorage.Dungeon.Remotes.StartDungeon:FireServer()
                ReplicatedStorage.Dungeon.Remotes.StartDungeon:FireServer()
                ReplicatedStorage.Dungeon.Remotes.StartWaveDefense:FireServer()
                ReplicatedStorage.Shared.Remotes.Data.ClaimPrizes:FireServer()
                for i, v in pairs(Workspace:GetChildren()) do
                    if v:FindFirstChild("FinishRoom", true) and v:FindFirstChild("FinishRoom", true):FindFirstChild("Hitbox", true) then
                        firetouchinterest(Player.Character:FindFirstChild("HumanoidRootPart", true),v:FindFirstChild("FinishRoom",true):FindFirstChild("Hitbox",true):FindFirstChild("Part",true),0)
                        firetouchinterest(Player.Character:FindFirstChild("HumanoidRootPart", true),v:FindFirstChild("FinishRoom",true):FindFirstChild("Hitbox",true):FindFirstChild("Part",true),1)
                    end 
                end 
                if GetClosestt():FindFirstChildWhichIsA("Humanoid",true).Health ~= 0 then
                    Tween(Player.Character:FindFirstChild("HumanoidRootPart",true),GetClosestt().HumanoidRootPart,time)
                end 
            end)
        end
    end)
    spawn(function()
        while wait() and Settings.Re do
            local player, cha, plr, hum = getPlayer()
            local dungeon, rooms, enemies, shrines = getDungeon()
            for _, v in pairs(rooms:GetDescendants()) do
                if v:FindFirstChildWhichIsA("TouchTransmitter", true) and v.Name == "Trigger" then
                    v.Primary.CFrame = plr.CFrame
                    wait()
                end
            end
            wait()
        end
    end)
end)
    
Options.AutoGrotto:SetValue(false)

-- Initialize the global variable
_G.TPG3 = false

local Toggle = Tabs.Main:AddToggle("AutoKillGrottoBoss", {Title = "Teleport to Spawn Boss", Default = false })

Toggle:OnChanged(function(Tswx)
    _G.TPG3 = Tswx  -- Update the global variable

    local TweenService = game:GetService("TweenService")
    local player = game.Players.LocalPlayer

    local function moveCharacter()
        local character = player.Character
        if not character then
            return  -- Character might not exist (e.g., during respawn)
        end

        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
        local destinationCFrame = CFrame.new(Vector3.new(-1593.79, 515.489, 606.864))

        local Distance = (destinationCFrame.Position - humanoidRootPart.Position).Magnitude

        local Speed =  68 -- Default speed for larger distances
        if Distance < 150 then
            Speed = 50
        elseif Distance < 200 then
            Speed = 52
        elseif Distance < 300 then
            Speed = 56
        elseif Distance < 500 then
            Speed = 64
        elseif Distance < 1000 then
            Speed = 68
        end

        local tweenInfo = TweenInfo.new(Distance / Speed, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
        local tweenGoal = {}
        tweenGoal.CFrame = destinationCFrame

        local tween = TweenService:Create(humanoidRootPart, tweenInfo, tweenGoal)
        tween:Play()
        wait(10)
    end

    while wait(0.1)  and _G.TPG3 do
        if _G.TPG3 == true then
            moveCharacter()
        end
    end
end)

Tabs.Main:AddParagraph({
        Title = "Auto Shrine Settings (WIP) ",
        Content = "Not Working Cuz its too lots of Bugs"
    })

local Dasd = "Summoning"

_G.Main = {
    AutoShrine = {
        CollectShrines = {
            ToCollect = {Dasd}
        }
    }
}

local function getClosestShrine()
    local target
    local dungeon, rooms, enemies, shrines = getDungeon()
    local shrinesFolder = dungeon:WaitForChild("Shrines")
    local closestDistance = math.huge

    for _, shrine in ipairs(shrinesFolder:GetChildren()) do
        if shrine:FindFirstChild("Primary") and shrine.Primary:FindFirstChild("ProximityPrompt") then
            if table.find(_G.Main.AutoShrine.CollectShrines.ToCollect, shrine.Name) then
                local distance = (shrine.Primary.Position - Player.Character:FindFirstChild("HumanoidRootPart").Position).Magnitude
                if distance < closestDistance then
                    target = shrine
                    closestDistance = distance
                end
            end
        end
    end

    return target
end

local function pressE()
    game:GetService('VirtualInputManager'):SendKeyEvent(true, "E", false, game)
end

local Toggle1 = Tabs.Main:AddToggle("AutoShrine", {Title = "Auto Collect Shrine", Default = false})

Toggle1:OnChanged(function(State)
    if State then
        local closestShrine = getClosestShrine()
        if closestShrine then
            spawn(pressE)
            Tween(Player.Character:FindFirstChild("HumanoidRootPart", true), closestShrine.Primary, 1) -- Adjust the time as needed
        end
    end
end)

local ShrineName = Tabs.Main:AddInput("ShrineType", {
    Title = "Shrine Name",
    Default = Dasd,
    Placeholder = "Shrine Name Here",
    Numeric = false,
    Finished = false,
    Callback = function(Value3)
        Dasd = tostring(Value3)
    end
})


local Tabs = {
    Main = Window:AddTab({ Title = "Hitbox Settings", Icon = "rbxassetid://7734022107" }),
}

if isLobby or isDungeon or isGrandGrotto then

Tabs.Main:AddParagraph({
        Title = "Hitbox Toggle",
        Content = "Optimized Hitbox V2"
    })

local RunService = game:GetService("RunService")

local xhx, yhx, zhx, txx = 1, 1, 1, 0.5
local hitboxTest = false
local lastUpdateTime = 0
local updateInterval = 1  -- Set the interval in seconds

local function enableHitbox(monsterRootPart)
    monsterRootPart.Size = Vector3.new(xhx, yhx, zhx)
    monsterRootPart.Transparency = txx
end

local function disableHitbox(monsterRootPart)
    monsterRootPart.Size = Vector3.new(5, 5, 5)
    monsterRootPart.Transparency = 1
end

local function toggleHitboxState()
    local currentTime = tick()
    if currentTime - lastUpdateTime >= updateInterval then
        lastUpdateTime = currentTime

        local dungeon, rooms, enemies, shrines = getDungeon()

        for _, monster in ipairs(enemies:GetChildren()) do
            if monster:FindFirstChild("EvilHumanoid") and monster:FindFirstChild("HumanoidRootPart") and
               monster.EvilHumanoid.Health > 0 then
                local monsterRootPart = monster.HumanoidRootPart

                if hitboxTest then
                    enableHitbox(monsterRootPart)
                else
                    disableHitbox(monsterRootPart)
                end
            end
        end
    end
end

local Toggle = Tabs.Main:AddToggle("HitboxEnemies", {Title = "Hitbox Toggle", Default = false })

Toggle:OnChanged(function(isEnabled)
    hitboxTest = isEnabled
end)

RunService.Heartbeat:Connect(function()
    toggleHitboxState()
end)

Options.HitboxEnemies:SetValue(false)

local InputX = Tabs.Main:AddInput("InputX", {
        Title = "Hitbox Size X",
        Default = "1",
        Placeholder = "Placeholder",
        Numeric = false, -- Only allows numbers
        Finished = false, -- Only calls callback when you press enter
        Callback = function(jxk)
        xhx = tonumber(jxk) or 5
        end
      })

local InputY = Tabs.Main:AddInput("InputY", {
        Title = "Hitbox Size Y",
        Default = "1",
        Placeholder = "Placeholder",
        Numeric = false, -- Only allows numbers
        Finished = false, -- Only calls callback when you press enter
        Callback = function(gxk)
        yhx = tonumber(gxk) or 5
        end
      })
      
local InputZ = Tabs.Main:AddInput("InputZ", {
        Title = "Hitbox Size Z",
        Default = "1",
        Placeholder = "Placeholder",
        Numeric = false, -- Only allows numbers
        Finished = false, -- Only calls callback when you press enter
        Callback = function(rxk)
        zhx = tonumber(rxk) or 5
        end
     })

local InputTransparency = Tabs.Main:AddInput("InputTransparency", {
        Title = "Hitbox Transparency",
        Default = "0.5",
        Placeholder = "Placeholder",
        Numeric = false, -- Only allows numbers
        Finished = false, -- Only calls callback when you press enter
        Callback = function(xxk)
        txx = tonumber(xxk) or 0.5
        end
     })

AuraSecond = 1

Tabs.Main:AddParagraph({
        Title = "Kill Aura",
        Content = "Ability Only And Hitbox"
    })

local Toggle = Tabs.Main:AddToggle("KillAura", {Title = "Kill Aura", Default = false })
local isToggleActive = false

Toggle:OnChanged(function(isToggled)
    isToggleActive = isToggled

    if isToggleActive then
        while isToggleActive do
            AllKill()
            wait(AuraSecond) 
        end
    end
end)

Options.KillAura:SetValue(false)

local Slider = Tabs.Main:AddSlider("KillAuraDelay", {
        Title = "Delay Kill Aura",
        Description = "",
        Default = 1,
        Min = 0,
        Max = 5,
        Rounding = 1,
        Callback = function(ack)
 AuraSecond = tonumber(ack) or 1
        end
    })

    Slider:SetValue(1)

end

if isWaveDefense then

Tabs.Main:AddParagraph({
        Title = "Wave Defense Version",
        Content = "(BETA)"
    })

local xhx, yhx, zhx, txx = 1, 1, 1, 0.5
local hitboxTest = false
local lastUpdateTime = 0
local updateInterval = 1  -- Set the interval in seconds

local function enableHitbox()
    for _, value in pairs(workspace:GetDescendants()) do
        if value:IsA("Model") and value:FindFirstChild("HumanoidRootPart") then
            if value.Name ~= game.Players.LocalPlayer.Name then
                value.HumanoidRootPart.Transparency = txx
                value.HumanoidRootPart.Size = Vector3.new(xhx, yhx, zhx)
            end
        end
    end
end

local function disableHitbox()
    for _, value in pairs(workspace:GetDescendants()) do
        if value:IsA("Model") and value:FindFirstChild("HumanoidRootPart") then
            if value.Name ~= game.Players.LocalPlayer.Name then
                value.HumanoidRootPart.Transparency = 1
                value.HumanoidRootPart.Size = Vector3.new(5, 5, 5)
            end
        end
    end
end

local RunService = game:GetService("RunService")

local function toggleHitboxState()
    local currentTime = tick()
    if currentTime - lastUpdateTime >= updateInterval then
        lastUpdateTime = currentTime

        if hitboxTest then
            enableHitbox()
        else
            disableHitbox()
        end
    end
end

local Toggle = Tabs.Main:AddToggle("HitboxEnemies", { Title = "Hitbox Toggle", Default = false })

Toggle:OnChanged(function(isEnabled)
    hitboxTest = isEnabled
    toggleHitboxState()
end)

RunService.Heartbeat:Connect(function()
  if hitboxTest then
    toggleHitboxState()
    end
end)

Options.HitboxEnemies:SetValue(false)

local InputX = Tabs.Main:AddInput("InputX", {
        Title = "Hitbox Size X",
        Default = "1",
        Placeholder = "Placeholder",
        Numeric = false, -- Only allows numbers
        Finished = false, -- Only calls callback when you press enter
        Callback = function(jxk)
        xhx = tonumber(jxk) or 5
        end
      })

local InputY = Tabs.Main:AddInput("InputY", {
        Title = "Hitbox Size Y",
        Default = "1",
        Placeholder = "Placeholder",
        Numeric = false, -- Only allows numbers
        Finished = false, -- Only calls callback when you press enter
        Callback = function(gxk)
        yhx = tonumber(gxk) or 5
        end
      })
      
local InputZ = Tabs.Main:AddInput("InputZ", {
        Title = "Hitbox Size Z",
        Default = "1",
        Placeholder = "Placeholder",
        Numeric = false, -- Only allows numbers
        Finished = false, -- Only calls callback when you press enter
        Callback = function(rxk)
        zhx = tonumber(rxk) or 5
        end
     })

local InputTransparency = Tabs.Main:AddInput("InputTransparency", {
        Title = "Hitbox Transparency",
        Default = "0.5",
        Placeholder = "Placeholder",
        Numeric = false, -- Only allows numbers
        Finished = false, -- Only calls callback when you press enter
        Callback = function(xxk)
        txx = tonumber(xxk) or 0.5
        end
     })

AuraSecond = 1

Tabs.Main:AddParagraph({
        Title = "Wave Defense Kill Aura",
        Content = ""
    })

local Toggle = Tabs.Main:AddToggle("KillAura", {Title = "Kill Aura", Default = false })
local isToggleActive = false

Toggle:OnChanged(function(isToggled)
    isToggleActive = isToggled

    if isToggleActive then
        while isToggleActive do
            AllKill2()
            wait(AuraSecond) 
        end
    end
end)

Options.KillAura:SetValue(false)

local Slider = Tabs.Main:AddSlider("KillAuraDelay", {
        Title = "Delay Kill Aura",
        Description = "",
        Default = 1,
        Min = 0,
        Max = 5,
        Rounding = 1,
        Callback = function(ack)
 AuraSecond = tonumber(ack) or 1
        end
    })

    Slider:SetValue(1)

end

local Tabs = {
    Main = Window:AddTab({ Title = "Custom Visuals", Icon = "rbxassetid://7734022107" }),
}

Tabs.Main:AddParagraph({
        Title = "Health (Visual) ",
        Content = ""
    })

local Input = Tabs.Main:AddInput("Input", {
        Title = "Min Health",
        Default = "100000",
        Placeholder = "Placeholder",
        Numeric = false, -- Only allows numbers
        Finished = false, -- Only calls callback when you press enter
        Callback = function(Hmin)
game.Players.LocalPlayer.Character.Humanoid.Health = Hmin
        end
    })

local Input = Tabs.Main:AddInput("Input", {
        Title = "Max Health",
        Default = "Default",
        Placeholder = "Placeholder",
        Numeric = false, -- Only allows numbers
        Finished = false, -- Only calls callback when you press enter
        Callback = function(Hmax)
game.Players.LocalPlayer.Character.Humanoid.MaxHealth = Hmax
        end
    })

if isLobby or isDungeon or isGrandGrotto then
Tabs.Main:AddParagraph({
        Title = "Enemies Modify",
        Content = ""
    })

spawn(function()
    while wait() do
        pcall(function()
            if MobESP then
                for i, v in pairs(game:GetService("Workspace").Dungeon.Enemies:GetChildren()) do
                    if v:FindFirstChild('HumanoidRootPart') then
                        local evilHumanoid = v:FindFirstChild("EvilHumanoid")  -- Change "Humanoid" to "EvilHumanoid"
                        
                        if not v:FindFirstChild("MobEap") then
                            local BillboardGui = Instance.new("BillboardGui")
                            local TextLabel = Instance.new("TextLabel")

                            BillboardGui.Parent = v
                            BillboardGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
                            BillboardGui.Active = true
                            BillboardGui.Name = "MobEap"
                            BillboardGui.AlwaysOnTop = true
                            BillboardGui.LightInfluence = 1.000
                            BillboardGui.Size = UDim2.new(0, 200, 0, 50)
                            BillboardGui.StudsOffset = Vector3.new(0, 2.5, 0)

                            TextLabel.Parent = BillboardGui
                            TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                            TextLabel.BackgroundTransparency = 1.000
                            TextLabel.Size = UDim2.new(0, 200, 0, 50)
                            TextLabel.Font = Enum.Font.GothamBold
                            TextLabel.TextColor3 = Color3.fromRGB(7, 236, 240)
                            TextLabel.TextSize = 14  -- Adjust the text size to your preference

                            v.MobEap = BillboardGui  -- Store the BillboardGui in MobEap for later use
                        end

                        local distance = math.floor((game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.HumanoidRootPart.Position).Magnitude)

                        if evilHumanoid then
                            local health = math.floor(evilHumanoid.Health)
                            v.MobEap.TextLabel.Text = v.Name.." - "..distance.." M\nHealth: "..health
                        else
                            v.MobEap.TextLabel.Text = v.Name.." - "..distance.." M"
                        end
                    end
                end
            else
                for i, v in pairs(game:GetService("Workspace").Dungeon.Enemies:GetChildren()) do
                    if v:FindFirstChild("MobEap") then
                        v.MobEap:Destroy()
                    end
                end
            end
        end)
    end
end)

local Toggle = Tabs.Main:AddToggle("EspMobs", {Title = "Esp Enemies", Default = false })

    Toggle:OnChanged(function(nec)
        MobESP = nec
    end)
    
Options.EspMobs:SetValue(false)
    

local RunService = game:GetService("RunService")

local archorMobsEnabled = false
local lastUpdateTime = 0
local updateInterval = 1

local function archorMobsEnable(monsterRootPart, monsterHumanoid)
    monsterHumanoid.PlatformStand = true
    monsterHumanoid.WalkSpeed = 0
    monsterHumanoid.JumpPower = 0
    monsterHumanoid.HipHeight = 0
    monsterRootPart.Anchored = true
end

local function archorMobsDisable(monsterRootPart, monsterHumanoid)
    monsterHumanoid.PlatformStand = false
    monsterHumanoid.WalkSpeed = 16
    monsterHumanoid.JumpPower = 50
    monsterHumanoid.HipHeight = 2.5
    monsterRootPart.Anchored = false
end

local function toggleArchorMobsState()
    local currentTime = tick()
    if currentTime - lastUpdateTime >= updateInterval then
        lastUpdateTime = currentTime

        local dungeon, rooms, enemies, shrines = getDungeon()

        for _, monster in ipairs(enemies:GetChildren()) do
            if monster:FindFirstChild("EvilHumanoid") and monster:FindFirstChild("HumanoidRootPart") and
               monster.EvilHumanoid.Health > 0 then
                local monsterRootPart = monster.HumanoidRootPart
                local monsterHumanoid = monster.EvilHumanoid

                if archorMobsEnabled then
                    archorMobsEnable(monsterRootPart, monsterHumanoid)
                else
                    archorMobsDisable(monsterRootPart, monsterHumanoid)
                end
            end
        end
    end
end

local ToggleArchorMobs = Tabs.Main:AddToggle("ArchorMobs", {Title = "Freeze Enemies Toggle", Default = false })

ToggleArchorMobs:OnChanged(function(isEnabled)
    archorMobsEnabled = isEnabled
end)

RunService.Heartbeat:Connect(function()
    toggleArchorMobsState()
end)

Options.ArchorMobs:SetValue(false)

end

if isWaveDefense then
Tabs.Main:AddParagraph({
        Title = "Enemies Modify",
        Content = "(Wave Defense)"
    })

spawn(function()
    while wait() do
        pcall(function()
            if MobESP then
                for i, v in pairs(game:GetService("Workspace").Dungeon.Enemies:GetChildren()) do
                    if v:FindFirstChild('HumanoidRootPart') then
                        local evilHumanoid = v:FindFirstChild("EvilHumanoid") or v:FindFirstChildOfClass("Humanoid")  -- Change "Humanoid" to "EvilHumanoid"
                        
                        if not v:FindFirstChild("MobEap") then
                            local BillboardGui = Instance.new("BillboardGui")
                            local TextLabel = Instance.new("TextLabel")

                            BillboardGui.Parent = v
                            BillboardGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
                            BillboardGui.Active = true
                            BillboardGui.Name = "MobEap"
                            BillboardGui.AlwaysOnTop = true
                            BillboardGui.LightInfluence = 1.000
                            BillboardGui.Size = UDim2.new(0, 200, 0, 50)
                            BillboardGui.StudsOffset = Vector3.new(0, 2.5, 0)

                            TextLabel.Parent = BillboardGui
                            TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                            TextLabel.BackgroundTransparency = 1.000
                            TextLabel.Size = UDim2.new(0, 200, 0, 50)
                            TextLabel.Font = Enum.Font.GothamBold
                            TextLabel.TextColor3 = Color3.fromRGB(7, 236, 240)
                            TextLabel.TextSize = 14  -- Adjust the text size to your preference

                            v.MobEap = BillboardGui  -- Store the BillboardGui in MobEap for later use
                        end

                        local distance = math.floor((game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.HumanoidRootPart.Position).Magnitude)

                        if evilHumanoid then
                            local health = math.floor(evilHumanoid.Health)
                            v.MobEap.TextLabel.Text = v.Name.." - "..distance.." M\nHealth: "..health
                        else
                            v.MobEap.TextLabel.Text = v.Name.." - "..distance.." M"
                        end
                    end
                end
            else
                for i, v in pairs(game:GetService("Workspace").Dungeon.Enemies:GetChildren()) do
                    if v:FindFirstChild("MobEap") then
                        v.MobEap:Destroy()
                    end
                end
            end
        end)
    end
end)

local Toggle = Tabs.Main:AddToggle("EspMobs", {Title = "Esp Enemies", Default = false })

    Toggle:OnChanged(function(nec)
        MobESP = nec
    end)
    
Options.EspMobs:SetValue(false)
    

local RunService = game:GetService("RunService")

local archorMobsEnabled = false
local lastUpdateTime = 0
local updateInterval = 1

local function archorMobsEnable(monsterRootPart)
    monsterRootPart.Anchored = true
end

local function archorMobsDisable(monsterRootPart)
    monsterRootPart.Anchored = false
end

local function toggleArchorMobsState()
    local currentTime = tick()
    if currentTime - lastUpdateTime >= updateInterval then
        lastUpdateTime = currentTime

   for _, monster in pairs(workspace:GetDescendants()) do
    if monster:FindFirstChild("HumanoidRootPart") then
        if monster.Name ~= game.Players.LocalPlayer.Name then
            local monsterRootPart = monster.HumanoidRootPart

                if archorMobsEnabled then
                    archorMobsEnable(monsterRootPart)
                else
                    archorMobsDisable(monsterRootPart)
                end
             end
         end
      end
   end
end

local ToggleArchorMobs = Tabs.Main:AddToggle("ArchorMobs", {Title = "Freeze Enemies Toggle", Default = false })

ToggleArchorMobs:OnChanged(function(isEnabled)
    archorMobsEnabled = isEnabled
end)

RunService.Heartbeat:Connect(function()
    toggleArchorMobsState()
end)

Options.ArchorMobs:SetValue(false)

end

-- Function to get the nearest target
function getNearestTarget()
    local target
    local closest = math.huge
    local player, cha, plr, hum = getPlayer()
    local dungeon, rooms, enemies, shrines = getDungeon()

    for _, v in pairs(enemies:GetChildren()) do
        if v:FindFirstChild("EvilHumanoid") and v:FindFirstChild("HumanoidRootPart") and v.EvilHumanoid.Health > 0 then
            local distance = (v.HumanoidRootPart.Position - plr.Position).Magnitude
            if distance < closest then
                closest = distance
                target = v
            end
        end
    end

    return target
end

-- Function to generate a random string
function generateRandomString()
    local chars = {"q", "w", "e", "r", "t", "y", "u", "i", "o", "p", "a", "s", "d", "f", "g", "h", "j", "k", "l", "z",
                   "x", "c", "v", "b", "n", "m", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "X", "A", "B", "V",
                   "R", "I", "O", "P", "L"}
    local str = ""

    for i = 1, 16 do
        str = str .. chars[math.random(1, #chars)]
    end

    return str
end

-- Variable to store the random camera part name
local cameraPartName = generateRandomString()

-- Function to update the camera focus
function updateCamera()
    while isUpdatingCamera do
        local monster = getNearestTarget()
        local camera = workspace.CurrentCamera
        local dungeon, rooms, enemies, shrines = getDungeon()

        if monster then
            camera.CameraSubject = monster.EvilHumanoid
        else
            if isWaveDefense then
                camera.CameraSubject = dungeon.Spawn
            else
                camera.CameraSubject = workspace.Characters:FindFirstChild(cameraPartName)
            end
        end
        wait(0.1)  -- Add a small delay to avoid using too much CPU
    end
end

function resetCamera()
    local player = game.Players.LocalPlayer
    local character = player.Character

    if character then
        local humanoid = character:FindFirstChildOfClass("Humanoid")

        if humanoid then
            local camera = workspace.CurrentCamera
            camera.CameraSubject = humanoid
        end
    end
end

-- Add buttons to the UI
Tabs.Main:AddButton({
    Title = "View Enemies",
    Description = "",
    Callback = function()
        isUpdatingCamera = true  -- Start the camera update loop
        updateCamera()
    end
})

Tabs.Main:AddButton({
    Title = "Reset Camera",
    Description = "",
    Callback = function()
        resetCamera()
        isUpdatingCamera = false  -- Stop the camera update loop
    end
})

-- Initialize the variable to control the loop
local isUpdatingCamera = false

Tabs.Main:AddParagraph({
        Title = "Character Mods",
        Content = ""
    })

local UserInputService = game:GetService("UserInputService")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local Player = Players.LocalPlayer

local GodModeTag = Instance.new("BoolValue")
GodModeTag.Name = "GodMode"

local function GodModeFunc()
    if Player.Character then
        if Player.Character:FindFirstChild("Humanoid") then
            local humanoid = Player.Character.Humanoid
            local accessories = humanoid:GetAccessories()

            if #accessories > 0 then
                for _, accessory in ipairs(accessories) do
                    accessory:Destroy()
                end
            end

            humanoid.Name = "1"

            local newHumanoid = humanoid:Clone()
            newHumanoid.Parent = Player.Character
            newHumanoid.Name = "Humanoid"
            newHumanoid.Health = math.huge
            newHumanoid.MaxHealth = math.huge

            wait(0.1)

            Player.Character["1"]:Destroy()
            Workspace.CurrentCamera.CameraSubject = newHumanoid

            for _, accessory in ipairs(accessories) do
                humanoid:AddAccessory(accessory:Clone())
            end

            Player.Character.Animate.Disabled = true
            wait(0.1)
            Player.Character.Animate.Disabled = false

            --Tag:
            GodModeTag.Value = true

            spawn(function()
                local Jumping = false
                local Died = false

                humanoid.Died:Connect(function()
                    Died = true
                end)

                UserInputService.InputBegan:Connect(function(input, processed)
                    if not processed and not Died then
                        Jumping = true
                        spawn(function()
                            repeat
                                RunService.Heartbeat:Wait()
                            until not Jumping or Died
                        end)
                    end
                end)

                UserInputService.InputEnded:Connect(function(input, processed)
                    if not processed and not Died then
                        Jumping = false
                    end
                end)
            end)
        end
        wait(10)
      end
   end
 
local GodMode = Tabs.Main:AddToggle("GodChr", {Title = "God Mode", Default = false })

    GodMode:OnChanged(function(GodMode2)
    getgenv().God2 = GodMode2

        pcall(function()
            while getgenv().God2 and GodMode2 do
                GodModeFunc()
                RunService.Heartbeat:Wait()
            end
        end)
    end)

local Input = Tabs.Main:AddInput("Input", {
        Title = "WalkSpeed",
        Default = "26",
        Placeholder = "Placeholder",
        Numeric = false, -- Only allows numbers
        Finished = false, -- Only calls callback when you press enter
        Callback = function(WS)
_G.BypassWS = true
while wait(5) do
if _G.BypassWS == true then
game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = WS
end
end
        end
    })
    
    Tabs.Main:AddButton({
        Title = "Reset Walkspeed",
        Description = "",
        Callback = function()
_G.BypassWS = false
game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 18
        end
    })
    
local Input = Tabs.Main:AddInput("Input", {
        Title = "Jump Height",
        Default = "50",
        Placeholder = "Placeholder",
        Numeric = false, -- Only allows numbers
        Finished = false, -- Only calls callback when you press enter
        Callback = function(JP)
_G.BypassJP = true
while wait(5) do
if _G.BypassJP == true then
game.Players.LocalPlayer.Character.Humanoid.JumpPower = JP
end
end
        end
    })

Tabs.Main:AddButton({
        Title = "Reset JumpHeight",
        Description = "",
        Callback = function()
_G.BypassJP = false
game.Players.LocalPlayer.Character.Humanoid.JumpPower = 50
        end
    })

Tabs.Main:AddParagraph({
        Title = "Graphics",
        Content = ""
    })

Tabs.Main:AddButton({
        Title = "Legacy Graphic",
        Description = "",
        Callback = function()
local Lighting = game:FindService("Lighting")

setscriptable(Lighting, "Technology", true)
Lighting.Technology = Enum.Technology.Legacy

for _, v in next, workspace:GetDescendants() do
    if v:IsA("PointLight") or v:IsA("SpotLighting") or v:IsA("SurfaceLight") then
        local Light = v
        if not Light.Shadows then
            Light.Shadows = true
        end
    end
end
        end
    })

Tabs.Main:AddButton({
        Title = "Shadow Map Graphic",
        Description = "",
        Callback = function()
local Lighting = game:FindService("Lighting")

setscriptable(Lighting, "Technology", true)
Lighting.Technology = Enum.Technology.ShadowMap

for _, v in next, workspace:GetDescendants() do
    if v:IsA("PointLight") or v:IsA("SpotLighting") or v:IsA("SurfaceLight") then
        local Light = v
        if not Light.Shadows then
            Light.Shadows = true
        end
    end
end
        end
    })

Tabs.Main:AddButton({
        Title = "Future Graphic",
        Description = "",
        Callback = function()
local Lighting = game:FindService("Lighting")

setscriptable(Lighting, "Technology", true)
Lighting.Technology = Enum.Technology.Future

for _, v in next, workspace:GetDescendants() do
    if v:IsA("PointLight") or v:IsA("SpotLighting") or v:IsA("SurfaceLight") then
        local Light = v
        if not Light.Shadows then
            Light.Shadows = true
        end
    end
end
        end
    })

local Tabs = {
    Main = Window:AddTab({ Title = "Auto-Farm Settings", Icon = "settings" }),
}

Tabs.Main:AddParagraph({
        Title = "Toggles",
        Content = ""
    })

local Toggle = Tabs.Main:AddToggle("AntiAfk", {Title = "Anti-AFK", Default = false })

    Toggle:OnChanged(function()
local vu = game:GetService("VirtualUser")
repeat wait() until game:IsLoaded() 
	game:GetService("Players").LocalPlayer.Idled:connect(function()
    game:GetService("VirtualUser"):ClickButton2(Vector2.new())
		vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
		wait(1)
		vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
     end)
 end)

Options.AntiAfk:SetValue(true)

local function skipCutscene()
    local player, cha, plr, hum = getPlayer()
    local bossSpawn = player.PlayerScripts.Shared.Modules.Effects:FindFirstChild("BossSpawn") 
    if bossSpawn then
        bossSpawn:Destroy()
      end
 end

local Toggle = Tabs.Main:AddToggle("SkipCutscene", {Title = "Skip Cutscenes (Bug)", Default = false })

    Toggle:OnChanged(function(state)
       if state then
            skipCutscene()
        end
    end)

Options.SkipCutscene:SetValue(false)

local InfiniteJumpEnabled = false

local Toggle = Tabs.Main:AddToggle("AirJump", {Title = "Air Jump", Default = false })

Toggle:OnChanged(function(State)
    InfiniteJumpEnabled = State
end)

local Player = game:GetService("Players").LocalPlayer
game:GetService("UserInputService").JumpRequest:Connect(function()
    if InfiniteJumpEnabled then
        Player.Character:WaitForChild("Humanoid"):ChangeState("Jumping")
    end
end)
  
Options.AirJump:SetValue(false)
  

local Toggle = Tabs.Main:AddToggle("Noclip", {Title = "Noclip", Default = false })

local NoClipx = false

local function Noclip()
    game:GetService('RunService').Stepped:Connect(function()
        if NoClipx then
            pcall(function()
                for i, v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
                    if v:IsA("BasePart") then
                        v.CanCollide = false
                    end
                end
            end)
        end
    end)
end

    Toggle:OnChanged(function(State)
NoClipx = State
    end)

Options.Noclip:SetValue(false)

Noclip()
 
Tabs.Main:AddParagraph({
        Title = "Auto-Farm Support",
        Content = ""
    })

Tabs.Main:AddButton({
        Title = "Fly Gui",
        Description = "Manual",
        Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/XNEOFF/FlyGuiV3/main/FlyGuiV3.txt"))()
        end
    })

local FLYING = false
local velocityHandlerName = "VelocityHandler"
local gyroHandlerName = "GyroHandler"
local mfly1, mfly2
local currentCharacter

local function getRoot(character)
    return character:FindFirstChild("HumanoidRootPart") or character:FindFirstChild("Torso")
end

local function unmobilefly(player)
    pcall(function()
        FLYING = false
        local character = player.Character
        if character then
            local root = getRoot(character)
            if root then
                local velocityHandler = root:FindFirstChild(velocityHandlerName)
                local gyroHandler = root:FindFirstChild(gyroHandlerName)

                if velocityHandler then
                    velocityHandler:Destroy()
                end

                if gyroHandler then
                    gyroHandler:Destroy()
                end

                local humanoid = character:FindFirstChildWhichIsA("Humanoid")
                if humanoid then
                    humanoid.PlatformStand = false
                end
            end
        end

        if mfly1 then
            mfly1:Disconnect()
        end

        if mfly2 then
            mfly2:Disconnect()
        end
    end)
end

local function mobilefly(player, vfly)
    unmobilefly(player)
    FLYING = true

    local character = player.Character
    local root = getRoot(character)

    if character and root then
        local camera = workspace.CurrentCamera
        local v3none = Vector3.new()
        local v3zero = Vector3.new(0, 0, 0)
        local v3inf = Vector3.new(9e9, 9e9, 9e9)

        local controlModule = require(player.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule"))
        local bv = Instance.new("BodyVelocity")
        bv.Name = velocityHandlerName
        bv.Parent = root
        bv.MaxForce = v3zero
        bv.Velocity = v3zero

        local bg = Instance.new("BodyGyro")
        bg.Name = gyroHandlerName
        bg.Parent = root
        bg.MaxTorque = v3inf
        bg.P = 1000
        bg.D = 20

        mfly1 = player.CharacterAdded:Connect(function()
            unmobilefly(player)
            currentCharacter = player.Character
            mobilefly(player, vfly)
        end)

        mfly2 = RunService.RenderStepped:Connect(function()
            root = getRoot(player.Character)
            camera = workspace.CurrentCamera
            if player.Character:FindFirstChildWhichIsA("Humanoid") and root and root:FindFirstChild(velocityHandlerName) and root:FindFirstChild(gyroHandlerName) then
                local humanoid = player.Character:FindFirstChildWhichIsA("Humanoid")
                local VelocityHandler = root:FindFirstChild(velocityHandlerName)
                local GyroHandler = root:FindFirstChild(gyroHandlerName)

                if VelocityHandler and GyroHandler then
                    VelocityHandler.MaxForce = v3inf
                    GyroHandler.MaxTorque = v3inf

                    if not vfly and humanoid then
                        humanoid.PlatformStand = false
                    end

                    GyroHandler.CFrame = camera.CoordinateFrame
                    VelocityHandler.Velocity = v3none

                    local direction = controlModule:GetMoveVector()
                    if direction.X ~= 0 or direction.Z ~= 0 then
                        local moveVector = Vector3.new(direction.X, 0, direction.Z).unit
                        local rightVector = camera.CFrame.RightVector
                        local forwardVector = camera.CFrame.LookVector

                        local flyDirection = (rightVector * moveVector.X - forwardVector * moveVector.Z).unit

                        VelocityHandler.Velocity = flyDirection * (_G.flySpeed * 20)
                    end
                end
            end
        end)
    end
end

local function toggleFly(player, toggleValue)
    if toggleValue then
        mobilefly(player, true)
    else
        unmobilefly(player)
    end
end

-- Your loop structure
_G.loops = false

local function flyLoop()
    while wait(3) do
        if _G.loops then
            local player = game.Players.LocalPlayer
            if player and player.Character then
                mobilefly(player, true)
            end
        end
    end
end

local Toggle = Tabs.Main:AddToggle("FlyToggle", { Title = "Fly Toggle", Default = false })

Toggle:OnChanged(function()
    local player = game.Players.LocalPlayer
    _G.loops = Toggle.Value
    toggleFly(player, Toggle.Value)
end)

Options.FlyToggle:SetValue(false)

_G.flySpeed = 20  -- Default fly speed

local FlySpeedInput = Tabs.Main:AddInput("FlySpeedInput", {
    Title = "Fly Speed (ignore about the error)",
    Default = tostring(_G.flySpeed),
    Placeholder = "Enter fly speed",
    Numeric = true,
    Finished = false,
    Callback = function(Value)
        _G.flySpeed = tonumber(Value) or 20
        toggleFly(player, Toggle.Value)
    end
})

-- Start the loop
spawn(flyLoop)

Tabs.Main:AddParagraph({
        Title = "Destroy Maps",
        Content = ""
    })

local Toggle = Tabs.Main:AddToggle("DestroyMap", {Title = "Destroy Map", Default = false })

local toggleState = false -- Default state

local function destroyMap()
    for _, room in ipairs(workspace.Dungeon.Rooms:GetChildren()) do
        for _, child in ipairs(room:GetChildren()) do
            if child.Name == "Extra" or child.Name == "Extras" then
                workspace.Terrain:Clear()
                child:Destroy()
            end
        end
    end
end

local function destroyMap2()
    for _, room in ipairs(workspace.Dungeon.Rooms:GetChildren()) do
        for _, child in ipairs(room:GetChildren()) do
            if child.Name == "Shadow" then
                workspace.Terrain:Clear()
                child:Destroy()
            end
        end
    end
end

    Toggle:OnChanged(function(Value)
toggleState = Value
        if toggleState then
            destroyMap()
            destroyMap2()
        end
    end)
    
Options.DestroyMap:SetValue(false)
    
game:GetService("RunService").Heartbeat:Connect(function()
    if toggleState then
        destroyMap()
        destroyMap2()
        workspace.Terrain:Clear()
    end
end)

Tabs.Main:AddButton({
        Title = "Destroy Map (old)",
        Description = "",
        Callback = function()
_G.loopsMap1 = true
while wait(1) do
if _G.loopsMap1 == true then
    for _, value in pairs(workspace:GetDescendants()) do
        if value:IsA("Part") and value.Parent.Name ~= game.Players.LocalPlayer.Name then
            value.Transparency = 1
        end
    end
end
end
end
    })


Tabs.Main:AddButton({
        Title = "Destroy Map 2 (Old)",
        Description = "Make ur Item invisible",
        Callback = function()
_G.loopsMap2 = true
while wait(1) do
if _G.loopsMap2 == true then
    for _, value in pairs(workspace:GetDescendants()) do
        if value:IsA("BasePart") and value.Parent.Name ~= game.Players.LocalPlayer.Name then
            value.Transparency = 1
        end
    end
     -- Connected Script To remove MeshPart
    for _, value in pairs(workspace:GetDescendants()) do
        if value:IsA("MeshPart") and value.Parent.Name ~= game.Players.LocalPlayer.Name then
            value.Transparency = 1
        end
    end
end
end
        end
    })

local Tabs = {
    Main = Window:AddTab({ Title = "Misc-Dungeon", Icon = "rbxassetid://7734068321" }),
}

-- Define toggle settings in _G
_G.Setting = {
    AutoEquip = {
        Emblem = false,
    },
    AutoLeave = {
        WhenDied = {
            Enabled = false,
            Delay = 2
        },
        WhenInventoryFull = {
            Enabled = false,
            Delay = 2
        }
    }
}

if isGrandGrotto or isDungeon or isWaveDefense then
Tabs.Main:AddParagraph({
        Title = "Auto Leave",
        Content = "this will be cool at lobby auto create dungeon"
    })

local backpack = rightSideFrame:WaitForChild("Backpack")

local function AutoLeaveFull()
    local capacityLabel = backpack:FindFirstChild("Capacity") -- Use FindFirstChild to avoid errors if Capacity doesn't exist
    
    if capacityLabel and capacityLabel:IsA("TextLabel") then
        wait(10)
        print("Capacity Text:", capacityLabel.Text)  -- Print the current text value for debugging
        
        if tostring(capacityLabel.Text) == "FULL!" or tostring(capacityLabel.Text) == "FULL!!!" then
            print("Capacity is FULL!!!")
            wait(3)
       game.ReplicatedStorage.Dungeon.Remotes.BackToLobby:FireServer()
        end
    end
end

local AutoLeave1 = Tabs.Main:AddToggle("AutoLeaveWhenFull", {Title = "Auto-Leave When Full Inventory", Default = false })

local autoLeaveFullT = false

AutoLeave1:OnChanged(function(isEnabled)
    autoLeaveFullT = isEnabled
end)

-- Function to continuously check and auto-leave when the inventory is full
local function AutoLeaveFullLoop()
    while true do
        if autoLeaveFullT then
            AutoLeaveFull()
        end
        wait(3)
    end
end

-- Start the AutoLeaveLoop function in a separate thread
spawn(AutoLeaveFullLoop)

local function AutoLeaveDied()
    local deadCard = mainFrame.Bottom:WaitForChild("DeadCard")

    if deadCard and deadCard.Visible == true then
        print("You died and ran out of lives.")
        wait(3)
        game.ReplicatedStorage.Dungeon.Remotes.BackToLobby:FireServer()
    else
       wait(10)
        print("No DeadCard Found or its not visible.")
    end
end

local AutoLeave2 = Tabs.Main:AddToggle("AutoLeaveWhenDied", {Title = "Auto-Leave When Died", Default = false })

local autoLeaveDiedT = false

AutoLeave2:OnChanged(function(isEnabled)
    autoLeaveDiedT = isEnabled
end)

-- Function to continuously check and auto-leave when the inventory is full
local function AutoLeaveDiedLoop()
    while true do
        if autoLeaveDiedT then
            AutoLeaveDied()
        end
        wait(3)
    end
end

-- Start the AutoLeaveLoop function in a separate thread
spawn(AutoLeaveDiedLoop)
end

Tabs.Main:AddParagraph({
        Title = "Auto buy",
        Content = "make sure u encounter the mystery shop!"
    })

Tabs.Main:AddParagraph({
        Title = "Coral Kingdom",
        Content = ""
    })

local BuyitemCK = false
local selectedAmountCK = 1
local selectedShopCK = "Aquatic Chest"

local shopDataCK = {
    ["Aquatic Chest"] = {
        [1] = "AquaticArsenal",
        [2] = "0",
        [3] = selectedAmountCK
    },
    ["Bubble Effect"] = {
        [1] = "AquaticArsenal",
        [2] = "1",
        [3] = selectedAmountCK
    },
    ["Speed Potion"] = {
        [1] = "AquaticArsenal",
        [2] = "2",
        [3] = selectedAmountCK
    },
    ["Ability Potion"] = {
        [1] = "AquaticArsenal",
        [2] = "3",
        [3] = selectedAmountCK
    }
}

local Dropdown = Tabs.Main:AddDropdown("Dropdown", {
        Title = "Aquatic Shop",
        Values = {"Aquatic Chest", "Bubble Effect", "Speed Potion", "Ability Potion"},
        Multi = false,
        Default = selectedShopCK,
    })
    
Dropdown:OnChanged(function(value)
        selectedShopCK = value
    end)

local Dropdown = Tabs.Main:AddDropdown("Dropdown", {
        Title = "Amount",
        Values = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "15", "20", "25"},
        Multi = false,
        Default = tostring(selectedAmountCK),
    })

Dropdown:OnChanged(function(value)
        selectedAmountCK = tonumber(value) or 1
    end)

local Toggle = Tabs.Main:AddToggle("Buy1", {Title = "Buy item", Default = false })

    Toggle:OnChanged(function(value)
BuyitemCK = value
        if BuyitemCK then
            local args = shopDataCK[selectedShopCK]
            args[3] = selectedAmountCK
            game:GetService("ReplicatedStorage").Lobby.Remotes.ShopPurchase:FireServer(args[1], args[2], args[3])
            wait(0.1)
            game:GetService("ReplicatedStorage").Shared.Remotes.Data.ClaimPrizes:FireServer()
        end
    end)

Tabs.Main:AddParagraph({
        Title = "Daring Dojo",
        Content = ""
    })

local BuyitemDD = false
local selectedAmountDD = 1
local selectedShopDD = "Daring Chest"

local shopDataDD = {
    ["Daring Chest"] = {
        [1] = "SilentStash",
        [2] = "0",
        [3] = selectedAmountDD
    },
    ["Stealth Effect"] = {
        [1] = "SilentStash",
        [2] = "1",
        [3] = selectedAmountDD
    },
    ["Jump Potion"] = {
        [1] = "SilentStash",
        [2] = "2",
        [3] = selectedAmountDD
    }
}

local Dropdown = Tabs.Main:AddDropdown("Dropdown", {
        Title = "Silent Shop",
        Values = {"Daring Chest", "Stealth Effect", "Jump Potion"},
        Multi = false,
        Default = selectedShopDD,
    })
    
Dropdown:OnChanged(function(value)
        selectedShopDD = value
    end)

local Dropdown = Tabs.Main:AddDropdown("Dropdown", {
        Title = "Amount",
        Values = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "15", "20", "25"},
        Multi = false,
        Default = tostring(selectedAmountDD),
    })

Dropdown:OnChanged(function(value)
        selectedAmountDD = tonumber(value) or 1
    end)

local Toggle = Tabs.Main:AddToggle("Buy2", {Title = "Buy item", Default = false })

    Toggle:OnChanged(function(value)
BuyitemDD = value
        if BuyitemDD then
            local args = shopDataDD[selectedShopDD]
            args[3] = selectedAmountDD
            game:GetService("ReplicatedStorage").Lobby.Remotes.ShopPurchase:FireServer(args[1], args[2], args[3])
            wait(0.1)
            game:GetService("ReplicatedStorage").Shared.Remotes.Data.ClaimPrizes:FireServer()
        end
    end)

Tabs.Main:AddParagraph({
        Title = "Fiery Fortress",
        Content = ""
    })

local BuyitemFF = false
local selectedAmountFF = 1
local selectedShopFF = "Molten Chest"

local shopDataFF = {
    ["Molten Chest"] = {
        [1] = "MoltenMarket",
        [2] = "0",
        [3] = selectedAmountFF
    },
    ["Embers Effect"] = {
        [1] = "MoltenMarket",
        [2] = "1",
        [3] = selectedAmountFF
    },
    ["Warrior Potion"] = {
        [1] = "MoltenMarket",
        [2] = "2",
        [3] = selectedAmountFF
    },
    ["Wizard Potion"] = {
        [1] = "MoltenMarket",
        [2] = "3",
        [3] = selectedAmountFF
    },
    ["Archer Potion"] = {
        [1] = "MoltenMarket",
        [2] = "4",
        [3] = selectedAmountFF
    }
}

local Dropdown = Tabs.Main:AddDropdown("Dropdown", {
        Title = "Molten Market",
        Values = {"Molten Chest", "Embers Effect", "Warrior Potion", "Wizard Potion", "Archer Potion"},
        Multi = false,
        Default = selectedShopFF,
    })
    
Dropdown:OnChanged(function(value)
        selectedShopFF = value
    end)

local Dropdown = Tabs.Main:AddDropdown("Dropdown", {
        Title = "Amount",
        Values = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "15", "20", "25"},
        Multi = false,
        Default = tostring(selectedAmountFF),
    })

Dropdown:OnChanged(function(value)
        selectedAmountFF = tonumber(value) or 1
    end)

local Toggle = Tabs.Main:AddToggle("Buy3", {Title = "Buy item", Default = false })

    Toggle:OnChanged(function(value)
BuyitemFF = value
        if BuyitemFF then
            local args = shopDataFF[selectedShopFF]
            args[3] = selectedAmountFF
            game:GetService("ReplicatedStorage").Lobby.Remotes.ShopPurchase:FireServer(args[1], args[2], args[3])
            wait(0.1)
            game:GetService("ReplicatedStorage").Shared.Remotes.Data.ClaimPrizes:FireServer()
        end
    end)
    
local Tabs = {
    Main = Window:AddTab({ Title = "Teleport", Icon = "rbxassetid://7734037723" }),
}


Tabs.Main:AddButton({
        Title = "Teleport Dungeon Spawnpoint",
        Description = "",
        Callback = function()
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(0, 25, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1)
        end
    })

Tabs.Main:AddButton({
        Title = "Teleport Lobby Spawnpoint",
        Description = "",
        Callback = function()
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(597.041, 307.598, 452.364)
        end
    })

Tabs.Main:AddButton({
        Title = "Teleport All Elemental Sword",
        Description = "Newbie User Only",
        Callback = function()
-- Lava Sword
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(592.094116, 271.870483, 411.405548, 0.999581695, -9.72332082e-09, 0.0289210249, 1.06783506e-08, 1, -3.28675362e-08, -0.0289210249, 3.3162614e-08, 0.999581695)

wait(1)

-- upper sword
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(620.374, 629.185, 694.411)

wait (1)

-- ice sword
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(490.971, 237.207, 616.699)

wait(1)

-- crystal sword
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(429.602, 289.115, 549.409)

wait(1)

-- black sword
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(762.415, 229.793, 653.022)

wait(1)

-- green sword
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(838.448, 217.391, 435.103)

wait(1)

-- Main Spawn Point lobby
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(597.041, 307.598, 452.364)
warn("All sword already get")
        end
    })

Tabs.Main:AddButton({
        Title = "Daily Rewards",
        Description = "",
        Callback = function()
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(558.265, 307.889, 415.435)
        end
    })

Tabs.Main:AddButton({
        Title = "Spin Wheel",
        Description = "",
        Callback = function()
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(523.958, 313.488, 621.031)
        end
    })

Tabs.Main:AddButton({
        Title = "Quest Rewards",
        Description = "",
        Callback = function()
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(550.858, 307.592, 480.063)
        end
    })

Tabs.Main:AddButton({
        Title = "Daily Quest",
        Description = "",
        Callback = function()
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(547.629, 312.991, 577.481)
        end
    })

Tabs.Main:AddButton({
        Title = "Weapon Shop",
        Description = "",
        Callback = function()
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(561.511, 307.592, 636.999)
        end
    })

Tabs.Main:AddButton({
        Title = "Event Shop",
        Description = "",
        Callback = function()
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(620.034, 367.623, 785.656)
        end
    })

Tabs.Main:AddButton({
        Title = "Food Cart",
        Description = "",
        Callback = function()
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(717.144, 284.795, 667.71)
        end
    })

Tabs.Main:AddButton({
        Title = "Heroic Shop",
        Description = "",
        Callback = function()
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(910.215, 284.906, 693.791)
        end
    })

Tabs.Main:AddButton({
        Title = "The Emporium",
        Description = "",
        Callback = function()
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(758.942, 284.998, 606.16)
        end
    })

Tabs.Main:AddButton({
        Title = "Magic Merchant Shop",
        Description = "",
        Callback = function()
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(550.498, 307.592, 507.009)
        end
    })

Tabs.Main:AddButton({
        Title = "Bank",
        Description = "",
        Callback = function()
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(640.346, 307.598, 453.465)
        end
    })

Tabs.Main:AddButton({
        Title = "Blacksmith",
        Description = "",
        Callback = function()
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(660.68, 307.592, 497.431)
        end
    })


local Tabs = {
    Main = Window:AddTab({ Title = "Anti-Lags", Icon = "rbxassetid://7734053495" }),
}

Tabs.Main:AddButton({
        Title = "Auto Clear Console (Loop)",
        Description = "Auto Clear Error of Console Less Lag",
        Callback = function()
_G.loopsClear = true
while wait(1) do
if _G.loopsClear == true then
game:GetService("GuiService"):ClearError()
end
end
        end
    })

Tabs.Main:AddParagraph({
        Title = "Fps Cap",
        Content = ""
    })
    
    
local Input = Tabs.Main:AddInput("Input", {
        Title = "Fps Cap",
        Default = "500",
        Placeholder = "Placeholder",
        Numeric = false, -- Only allows numbers
        Finished = false, -- Only calls callback when you press enter
        Callback = function(F)
setfpscap(F)
        end
    })


Tabs.Main:AddParagraph({
        Title = "Fps Booster and Anti-Lags",
        Content = ""
    })

Tabs.Main:AddButton({
        Title = "Anti-Lag 1",
        Description = "",
        Callback = function()
_G.loops = true
while wait(1) do
if _G.loops == true then
for _, v in pairs(Workspace:GetDescendants()) do
    if v:IsA("BasePart") and not v.Parent:FindFirstChild("Humanoid") then
        v.Material = Enum.Material.SmoothPlastic
        if v:IsA("Texture") then
            v:Destroy()
        end
    end
end
end
end
        end
    })

Tabs.Main:AddButton({
        Title = "Anti-Lag 2",
        Description = "",
        Callback = function()
_G.Settings = {
    Players = {
        ["Ignore Me"] = true, -- Ignore your Character
        ["Ignore Others"] = true -- Ignore other Characters
    },
    Meshes = {
        Destroy = false, -- Destroy Meshes
        LowDetail = true -- Low detail meshes (NOT SURE IT DOES ANYTHING)
    },
    Images = {
        Invisible = true, -- Invisible Images
        LowDetail = false, -- Low detail images (NOT SURE IT DOES ANYTHING)
        Destroy = false, -- Destroy Images
    },
    ["No Particles"] = true, -- Disables all ParticleEmitter, Trail, Smoke, Fire and Sparkles
    ["No Camera Effects"] = true, -- Disables all PostEffect's (Camera/Lighting Effects)
    ["No Explosions"] = true, -- Makes Explosion's invisible
    ["No Clothes"] = true, -- Removes Clothing from the game
    ["Low Water Graphics"] = true, -- Removes Water Quality
    ["No Shadows"] = true, -- Remove Shadows
    ["Low Rendering"] = true, -- Lower Rendering
    ["Low Quality Parts"] = true -- Lower quality parts
}
loadstring(game:HttpGet(('https://raw.githubusercontent.com/Unknownproootest/UniversalfpsboostXunlocker/main/FpsBoost'),true))()
        end
    })

Tabs.Main:AddButton({
        Title = "Anti Lag 3",
        Description = "",
        Callback = function()
local decalsyeeted = true -- Leaving this on makes games look shitty but the fps goes up by at least 20.
local g = game
local w = g.Workspace
local l = g.Lighting
local t = w.Terrain
t.WaterWaveSize = 0
t.WaterWaveSpeed = 0
t.WaterReflectance = 0
t.WaterTransparency = 0
l.GlobalShadows = false
l.FogEnd = 9e9
l.Brightness = 0
settings().Rendering.QualityLevel = "Level01"
wait(1)
for i,v in pairs(g:GetDescendants()) do
    if v:IsA("Part") or v:IsA("Union") or v:IsA("MeshPart") then
        v.Material = "Plastic"
v.Reflectance = 0
elseif v:IsA("Decal") and decalsyeeted then 
v.Transparency = 1
elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then 
v.Lifetime = NumberRange.new(0)
    end
end
        end
    })

Tabs.Main:AddButton({
        Title = "Anti Lag 4",
        Description = "",
        Callback = function()
local decalsyeeted = true 
local g = game
local w = g.Workspace
local l = g.Lighting
local t = w.Terrain
sethiddenproperty(l,"Technology",2)
sethiddenproperty(t,"Decoration",false)
t.WaterWaveSize = 0
t.WaterWaveSpeed = 0
t.WaterReflectance = 0
t.WaterTransparency = 0
l.GlobalShadows = 0
l.FogEnd = 9e9
l.Brightness = 0
settings().Rendering.QualityLevel = "Level01"
for i, v in pairs(w:GetDescendants()) do
    if v:IsA("BasePart") and not v:IsA("MeshPart") then
        v.Material = "Plastic"
        v.Reflectance = 0
    elseif (v:IsA("Decal") or v:IsA("Texture")) and decalsyeeted then
        v.Transparency = 1
    elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
        v.Lifetime = NumberRange.new(0)
    elseif v:IsA("Explosion") then
        v.BlastPressure = 1
        v.BlastRadius = 1
    elseif v:IsA("Fire") or v:IsA("SpotLight") or v:IsA("Smoke") or v:IsA("Sparkles") then
        v.Enabled = false
    elseif v:IsA("MeshPart") and decalsyeeted then
        v.Material = "Plastic"
        v.Reflectance = 0
        v.TextureID = 10385902758728957
    elseif v:IsA("SpecialMesh") and decalsyeeted  then
        v.TextureId=0
    elseif v:IsA("ShirtGraphic") and decalsyeeted then
        v.Graphic=0
    elseif (v:IsA("Shirt") or v:IsA("Pants")) and decalsyeeted then
        v[v.ClassName.."Template"]=0
    end
end
for i = 1,#l:GetChildren() do
    e=l:GetChildren()[i]
    if e:IsA("BlurEffect") or e:IsA("SunRaysEffect") or e:IsA("ColorCorrectionEffect") or e:IsA("BloomEffect") or e:IsA("DepthOfFieldEffect") then
        e.Enabled = false
    end
end
w.DescendantAdded:Connect(function(v)
    wait(1)--prevent errors and shit
   if v:IsA("BasePart") and not v:IsA("MeshPart") then
        v.Material = "Plastic"
        v.Reflectance = 0
    elseif v:IsA("Decal") or v:IsA("Texture") and decalsyeeted then
        v.Transparency = 1
    elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
        v.Lifetime = NumberRange.new(0)
    elseif v:IsA("Explosion") then
        v.BlastPressure = 1
        v.BlastRadius = 1
    elseif v:IsA("Fire") or v:IsA("SpotLight") or v:IsA("Smoke") or v:IsA("Sparkles") then
        v.Enabled = false
    elseif v:IsA("MeshPart") and decalsyeeted then
        v.Material = "Plastic"
        v.Reflectance = 0
        v.TextureID = 10385902758728957
    elseif v:IsA("SpecialMesh") and decalsyeeted then
        v.TextureId=0
    elseif v:IsA("ShirtGraphic") and decalsyeeted then
        v.ShirtGraphic=0
    elseif (v:IsA("Shirt") or v:IsA("Pants")) and decalsyeeted then
        v[v.ClassName.."Template"]=0
    end
end)
        end
    })

Tabs.Main:AddButton({
        Title = "White Screen (ON)",
        Description = "",
        Callback = function()
game:GetService("RunService"):Set3dRenderingEnabled(false)
        end
    })

Tabs.Main:AddButton({
        Title = "White Screen (OFF)",
        Description = "",
        Callback = function()
game:GetService("RunService"):Set3dRenderingEnabled(true)
        end
    })

local Tabs = {
    Main = Window:AddTab({ Title = "Update Logs", Icon = "rbxassetid://7733793319" }),
}

Tabs.Main:AddParagraph({
        Title = "V3.6 Updates",
        Content = ""
    })

Tabs.Main:AddParagraph({
        Title = "Fixed Lag Kill Aura 93%",
        Content = ""
    })

Tabs.Main:AddParagraph({
        Title = "Added Auto-Leave",
        Content = ""
    })

Tabs.Main:AddParagraph({
        Title = "improved Auto Bank",
        Content = "(Now The Bank insert is fast)"
    })

Tabs.Main:AddParagraph({
        Title = "Added Auto Create Dungeon",
        Content = "2 options Auto Create and Button Create"
    })

Tabs.Main:AddParagraph({
        Title = "Added God Mode",
        Content = "(Character Mod)"
    })

Tabs.Main:AddParagraph({
        Title = "Improved Freeze Enemies",
        Content = "(Enemies Mod)"
    })

Tabs.Main:AddParagraph({
        Title = "Improved Teleport to boss spawn",
        Content = "(suggestion by: crisis) reason: prevent humanoid teleport (not teleport lag back ;-;)"
    })

Tabs.Main:AddParagraph({
        Title = "Fixed Lag Wizard Farm 99%",
        Content = ""
    })

Tabs.Main:AddParagraph({
        Title = "Fixed Lag Kill Aura 98% ",
        Content = ""
    })

Tabs.Main:AddParagraph({
        Title = "Changed Tween Speed to Calculation",
        Content = ""
    })

Tabs.Main:AddParagraph({
        Title = "Added Fps and Game time",
        Content = "(Suggestion by Johnson3475)"
    })

Tabs.Main:AddParagraph({
        Title = "Fixed Anti-Lag Malfunction to Auto farm",
        Content = "(Report Bug by Crisis)"
    })

Tabs.Main:AddParagraph({
        Title = "Status Update: 🟢",
        Content = ""
    })
 
print("Changed SimulationRaduis")

game:GetService("RunService").RenderStepped:Connect(function()
    sethiddenproperty(game:GetService("Players").LocalPlayer, 'SimulationRadius', math.huge)
    sethiddenproperty(game:GetService("Players").LocalPlayer, 'MaximumSimulationRadius', math.huge)
end)

local Tabs = {
    Config = Window:AddTab({ Title = "Save Config", Icon = "rbxassetid://7734052335" }),
}

Tabs.Config:AddParagraph({
        Title = "Save Config",
        Content = "Save A Config"
    })

-- Save Manager
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

SaveManager:SetIgnoreIndexes({})

-- Save Folder
InterfaceManager:SetFolder("UnknownTQHub")
SaveManager:SetFolder("UnknownTQHub/TreasureQuest")

InterfaceManager:BuildInterfaceSection(Tabs.Config)
SaveManager:BuildConfigSection(Tabs.Config)

Window:SelectTab(1)

-- Auto Load Configuration
SaveManager:LoadAutoloadConfig()